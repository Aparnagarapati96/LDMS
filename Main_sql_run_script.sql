/**Create the Department table**/
CREATE TABLE departments (
    dept_id   NUMBER(5),--GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
    dept_name VARCHAR2(50) NOT NULL,
    location  VARCHAR2(50) NOT NULL,
    PRIMARY KEY ( dept_id )
)
    PARTITION BY LIST ( location ) ( PARTITION part_london VALUES ( 'LONDON' ),
        PARTITION part_cardiff VALUES ( 'CARDIFF' ),
        PARTITION part_edinburgh VALUES ( 'EDINBURGH' ),
        PARTITION part_belfast VALUES ( 'BELFAST' ),
        PARTITION part_others VALUES ( DEFAULT )
    );

COMMENT ON COLUMN departments.dept_id IS
    'The Unique identifier for the department';

COMMENT ON COLUMN departments.dept_name IS
    'The name of the department';

COMMENT ON COLUMN departments.location IS
    'The physical location of the department';
/

/* Creating the Employee */
CREATE TABLE employees (
    emp_id     NUMBER(10)
        GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 90001 INCREMENT BY 1,
    emp_name   VARCHAR2(50) NOT NULL,
    job_title  VARCHAR2(50) NOT NULL,
    manager_id NUMBER(10),
    hire_date  DATE NOT NULL,
    salary     NUMBER(10) NOT NULL,
    dept_id    NUMBER(10) NOT NULL,
    CONSTRAINT emp_id_pk PRIMARY KEY ( emp_id ),
    CONSTRAINT dept_id_pk FOREIGN KEY ( dept_id )
        REFERENCES departments ( dept_id )
            ON DELETE CASCADE
)
    PARTITION BY RANGE (
        hire_date
    )
    ( PARTITION p1990
        VALUES LESS THAN ( TO_DATE('01-JAN-1991', 'DD-MON-YYYY') )
    COMPRESS,
    PARTITION p1991_p1994
        VALUES LESS THAN ( TO_DATE('01-JAN-1995', 'DD-MON-YYYY') ),
    PARTITION p1995_p1999
        VALUES LESS THAN ( TO_DATE('01-JAN-2000', 'DD-MON-YYYY') ),
    PARTITION p2000_p2004
        VALUES LESS THAN ( TO_DATE('01-JAN-2005', 'DD-MON-YYYY') ),
    PARTITION p2005_p2009
        VALUES LESS THAN ( TO_DATE('01-JAN-2010', 'DD-MON-YYYY') ),
    PARTITION p2010_p2014
        VALUES LESS THAN ( TO_DATE('01-JAN-2015', 'DD-MON-YYYY') ),
    PARTITION p2015_p2020
        VALUES LESS THAN ( TO_DATE('01-JAN-2020', 'DD-MON-YYYY') ),
    PARTITION p2021_p2025
        VALUES LESS THAN ( TO_DATE('01-JAN-2025', 'DD-MON-YYYY') ),
    PARTITION p2026_p2030
        VALUES LESS THAN ( TO_DATE('01-JAN-2030', 'DD-MON-YYYY') ),
    PARTITION p_maxvalue
        VALUES LESS THAN ( MAXVALUE )
    );

COMMENT ON COLUMN employees.emp_id IS
    'The unique identifier for the employee';

COMMENT ON COLUMN employees.emp_name IS
    'The name of the employee';

COMMENT ON COLUMN employees.job_title IS
    'The job role undertaken by the employee. Some employees may undertaken the same job role';

COMMENT ON COLUMN employees.manager_id IS
    'Line manager of the employee';

COMMENT ON COLUMN employees.hire_date IS
    'The date the employee was hired';

COMMENT ON COLUMN employees.salary IS
    'Current salary of the employee';

COMMENT ON COLUMN employees.dept_id IS
    'Each employee must belong to a department';

CREATE INDEX emp_id_idx ON
    employees (
        emp_id,
        dept_id
    );
/*Populate the Departments and Employees data structures using the data specified in the Appendix*/
INSERT ALL INTO departments (
    dept_id,
    dept_name,
    location
) VALUES (
    1,
    'Management',
    'London'
) INTO departments (
    dept_id,
    dept_name,
    location
) VALUES (
    2,
    'Engineering',
    'Cardiff'
) INTO departments (
    dept_id,
    dept_name,
    location
) VALUES (
    3,
    'Research and Development',
    'Edinburgh'
) INTO departments (
    dept_id,
    dept_name,
    location
) VALUES (
    4,
    'Sales',
    'Belfast'
) SELECT
      1
  FROM
      dual;

COMMIT;
/
INSERT INTO employees (
    emp_id,
    emp_name,
    job_title,
    manager_id,
    hire_date,
    salary,
    dept_id
)
    WITH dept_details AS (
        SELECT
            90001,
            'John Smith',
            'CEO',
            NULL,
            '01/01/95',
            100000,
            1
        FROM
            dual
        UNION ALL
        SELECT
            90002,
            'Jimmy Willis',
            'Manager',
            90001,
            '23/09/03',
            52500,
            4
        FROM
            dual
        UNION ALL
        SELECT
            90003,
            'Roxy Jones',
            'Salesperson',
            90002,
            '11/02/17',
            35000,
            4
        FROM
            dual
        UNION ALL
        SELECT
            90004,
            'Selwyn Field',
            'Salesperson',
            90003,
            '20/05/15',
            32000,
            4
        FROM
            dual
        UNION ALL
        SELECT
            90005,
            'David Hallett',
            'Engineer',
            90006,
            '17/04/18',
            40000,
            2
        FROM
            dual
        UNION ALL
        SELECT
            90006,
            'Sarah Phelps',
            'Manager',
            90001,
            '21/03/15',
            45000,
            2
        FROM
            dual
        UNION ALL
        SELECT
            90007,
            'Louise Harper',
            'Engineer',
            90006,
            '01/01/13',
            47000,
            2
        FROM
            dual
        UNION ALL
        SELECT
            90008,
            'Tina Hart',
            'Engineer',
            90009,
            '28/07/14',
            45000,
            3
        FROM
            dual
        UNION ALL
        SELECT
            90009,
            'Gus Jones',
            'Manager',
            90001,
            '15/05/18',
            50000,
            3
        FROM
            dual
        UNION ALL
        SELECT
            90010,
            'Mildred Hall',
            'Secretary',
            90001,
            '12/10/96',
            35000,
            1
        FROM
            dual
    )
    SELECT
        *
    FROM
        dept_details;

COMMIT;
/
/**Creating a procedure to allow an Employee to be created**/

CREATE OR REPLACE PROCEDURE employee_insert_proc (
    p_emp_id     employees.emp_id%TYPE,
    p_emp_name   employees.emp_name%TYPE,
    p_job_title  employees.job_title%TYPE,
    p_manager_id employees.manager_id%TYPE,
    p_hire_date  employees.hire_date%TYPE,
    p_salary     employees.salary%TYPE,
    p_dept_id    employees.dept_id%TYPE
) AS
BEGIN
    INSERT INTO employees (
        emp_id,
        emp_name,
        job_title,
        manager_id,
        hire_date,
        salary,
        dept_id
    ) VALUES (
        p_emp_id,
        p_emp_name,
        p_job_title,
        p_manager_id,
        p_hire_date,
        p_salary,
        p_dept_id
    );

    dbms_output.put_line(p_emp_name || ' employee record inserted');
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        raise_application_error(-20005, 'An error occured while inserting the employee data '
                                        || sqlcode
                                        || 'error msg- '
                                        || sqlerrm);
END;
/
/**Creating a package for an Employee's Salary to be increased or decreased by a percentage**/
CREATE OR REPLACE PACKAGE emp_sal_increase_or_decrease_pkg AS
    PROCEDURE emp_sal_increase_proc (
        l_emp_id   IN employees.emp_id%TYPE,
        l_comm_pct IN NUMBER
    );

    PROCEDURE emp_sal_decrease_proc (
        l_emp_id   IN employees.emp_id%TYPE,
        l_comm_pct IN NUMBER
    );

END emp_sal_increase_or_decrease_pkg;
/

CREATE OR REPLACE PACKAGE BODY emp_sal_increase_or_decrease_pkg AS

    PROCEDURE emp_sal_increase_proc (
        l_emp_id   IN employees.emp_id%TYPE,
        l_comm_pct IN NUMBER
    ) AS
    BEGIN
        UPDATE employees emp
        SET
            emp.salary = emp.salary + ( emp.salary * l_comm_pct / 100 )
        WHERE
            emp.emp_id = emp_sal_increase_proc.l_emp_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error occured while attempting update to an employee');
            ROLLBACK;
    END emp_sal_increase_proc;

    PROCEDURE emp_sal_decrease_proc (
        l_emp_id   IN employees.emp_id%TYPE,
        l_comm_pct IN NUMBER
    ) AS
    BEGIN
        UPDATE employees emp
        SET
            emp.salary = emp.salary - ( emp.salary * l_comm_pct / 100 )
        WHERE
            emp.emp_id = emp_sal_decrease_proc.l_emp_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error occured while attempting update to an employee');
            ROLLBACK;
    END emp_sal_decrease_proc;

END emp_sal_increase_or_decrease_pkg;
/
/*Creating a procedure to allow the transfer of an Employee to a different Department*/

CREATE OR REPLACE PROCEDURE employee_transfer_proc (
    l_dept_id employees.dept_id%TYPE,
    l_emp_id  employees.emp_id%TYPE
) AS
    lv_dept_id employees.dept_id%TYPE;
BEGIN
    SELECT
        d.dept_id
    INTO lv_dept_id
    FROM
        employees   e,
        departments d
    WHERE
            d.dept_id = e.dept_id
        AND e.emp_id = l_emp_id;

    UPDATE employees
    SET
        dept_id = employee_transfer_proc.l_dept_id
    WHERE
        emp_id = employee_transfer_proc.l_emp_id;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(-20006, 'Updating emp record error out due to data missing');
    WHEN OTHERS THEN
        raise_application_error(-20007, 'Upadting process encountered with unhandled exception error'
                                        || sqlcode
                                        || ' '
                                        || sqlerrm);
END employee_transfer_proc;
/
/* Creating a function to return the Salary for all Employees*/
--Method 1:
CREATE OR REPLACE TYPE t_emp_sal_det IS
    TABLE OF VARCHAR(2000);
/

CREATE OR REPLACE FUNCTION fn_get_all_emp_sal_det RETURN t_emp_sal_det
    PIPELINED
AS
BEGIN
    FOR i IN (
        SELECT
            emp_id,
            emp_name,
            salary
        FROM
            employees
    ) LOOP
        PIPE ROW ( 'Emp Id ='
                   || i.emp_id
                   || ' Name "'
                   || i.emp_name
                   || '" Sal ='
                   || i.salary );
    END LOOP;

    RETURN;
END fn_get_all_emp_sal_det;
/
/* Create a procedure to return the Salary for an Employee*/
--Method 2:
CREATE OR REPLACE PROCEDURE get_emp_sal_proc (
    p_emp_id employees.emp_id%TYPE
) AS
    l_emp_rec employees%rowtype;
    CURSOR c1 IS
    SELECT
        *
    FROM
        employees
    WHERE
        emp_id = get_emp_sal_proc.p_emp_id;

BEGIN
    dbms_output.put_line(lpad('-', 60, '-'));
    dbms_output.put_line(rpad('Employee Name', 20)
                         || rpad('Designation', 20)
                         || lpad('Salary', 10));

    dbms_output.put_line(lpad('-', 60, '-'));
    OPEN c1;
    LOOP
        FETCH c1 INTO l_emp_rec;
        EXIT WHEN c1%notfound;
        dbms_output.put_line(rpad(l_emp_rec.emp_name, 20)
                             || rpad(l_emp_rec.job_title, 20)
                             || lpad(l_emp_rec.salary, 10));

    END LOOP;

    CLOSE c1;
END get_emp_sal_proc;
/
/*Write a report to show all Employees for a Department */
CREATE OR REPLACE VIEW emp_details_vw AS
    SELECT
        d.dept_id,
        emp_id,
        emp_name,
        dept_name,
        location
    FROM
        employees   e,
        departments d
    WHERE
        e.dept_id = d.dept_id
WITH READ ONLY;
/
/*Write a report to show the total of Employee Salary for a Department */

CREATE OR REPLACE VIEW dept_sal_details_vw AS
    SELECT
        d.dept_id   "Dept Id",
        dept_name   "Department Name",
        COUNT(*)    "No of Emps",
        SUM(salary) "Total Salary",
        MAX(salary) "Maximum Salary",
        MIN(salary) "Minimum salary",
        round(AVG(salary)) "Average Salary"
    FROM
        employees   e,
        departments d
    WHERE
        e.dept_id = d.dept_id
    GROUP BY
        d.dept_id,
        dept_name;
/		